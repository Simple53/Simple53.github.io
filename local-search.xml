<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/15/PicGo%E4%B8%8A%E4%BC%A0%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2022/03/15/PicGo%E4%B8%8A%E4%BC%A0%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<hr><p>title：PicGo上传Github图床失败解决办法<br>date：2022-03-15 20:40:52</p><hr><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>PicGo作为流行的图床上载工具之一，支持多种图床工具。综合了解多种教程之后，决定采用PicGo+Github+jsdilivr加速搭建个人图床。然而使用不久，便出现上传失败的情况<br><img src="https://cdn.jsdelivr.net/gh/Simple53/cdn//img/Image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Simple53/cdn//img/202203152027284.png"></p><p>picgo日志文件中的报错如下：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-number">2022</span><span class="hljs-number">-03</span><span class="hljs-number">-14</span> <span class="hljs-number">22</span>:<span class="hljs-number">13</span>:<span class="hljs-number">08</span> [PicGo INFO] Before transform <br><span class="hljs-number">2022</span><span class="hljs-number">-03</span><span class="hljs-number">-14</span> <span class="hljs-number">22</span>:<span class="hljs-number">13</span>:<span class="hljs-number">08</span> [PicGo INFO] Transforming... Current transformer is [path] <br><span class="hljs-number">2022</span><span class="hljs-number">-03</span><span class="hljs-number">-14</span> <span class="hljs-number">22</span>:<span class="hljs-number">13</span>:<span class="hljs-number">08</span> [PicGo INFO] Before upload <br><span class="hljs-number">2022</span><span class="hljs-number">-03</span><span class="hljs-number">-14</span> <span class="hljs-number">22</span>:<span class="hljs-number">13</span>:<span class="hljs-number">08</span> [PicGo INFO] <span class="hljs-name">beforeUploadPlugins</span>: renameFn running <br><span class="hljs-number">2022</span><span class="hljs-number">-03</span><span class="hljs-number">-14</span> <span class="hljs-number">22</span>:<span class="hljs-number">13</span>:<span class="hljs-number">08</span> [PicGo INFO] Uploading... Current uploader is [github] <br><span class="hljs-number">2022</span><span class="hljs-number">-03</span><span class="hljs-number">-14</span> <span class="hljs-number">22</span>:<span class="hljs-number">13</span>:<span class="hljs-number">08</span> [PicGo WARN] failed <br><span class="hljs-number">2022</span><span class="hljs-number">-03</span><span class="hljs-number">-14</span> <span class="hljs-number">22</span>:<span class="hljs-number">13</span>:<span class="hljs-number">08</span> [PicGo ERROR] <br><span class="hljs-comment">------Error Stack Begin------</span><br><span class="hljs-name">RequestError</span>: <span class="hljs-name">Error</span>: unable to verify the first certificate<br>    at new RequestError (<span class="hljs-name">F</span>:\Program Files\PicGo\resources\app.asar\node_modules\request-promise-core\lib\errors.<span class="hljs-name">js</span>:<span class="hljs-number">14</span>:<span class="hljs-number">15</span>)<br>    at Request.plumbing.callback (<span class="hljs-name">F</span>:\Program Files\PicGo\resources\app.asar\node_modules\request-promise-core\lib\plumbing.<span class="hljs-name">js</span>:<span class="hljs-number">87</span>:<span class="hljs-number">29</span>)<br>    at Request.RP$callback [as _callback] (<span class="hljs-name">F</span>:\Program Files\PicGo\resources\app.asar\node_modules\request-promise-core\lib\plumbing.<span class="hljs-name">js</span>:<span class="hljs-number">46</span>:<span class="hljs-number">31</span>)<br>    at self.callback (<span class="hljs-name">F</span>:\Program Files\PicGo\resources\app.asar\node_modules\request\request.<span class="hljs-name">js</span>:<span class="hljs-number">185</span>:<span class="hljs-number">22</span>)<br>    at Request.emit (events.<span class="hljs-name">js</span>:<span class="hljs-number">200</span>:<span class="hljs-number">13</span>)<br>    at Request.onRequestError (<span class="hljs-name">F</span>:\Program Files\PicGo\resources\app.asar\node_modules\request\request.<span class="hljs-name">js</span>:<span class="hljs-number">877</span>:<span class="hljs-number">8</span>)<br>    at ClientRequest.emit (events.<span class="hljs-name">js</span>:<span class="hljs-number">200</span>:<span class="hljs-number">13</span>)<br>    at TLSSocket.socketErrorListener (_http_client.<span class="hljs-name">js</span>:<span class="hljs-number">402</span>:<span class="hljs-number">9</span>)<br>    at TLSSocket.emit (events.<span class="hljs-name">js</span>:<span class="hljs-number">200</span>:<span class="hljs-number">13</span>)<br>    at emitErrorNT (internal/streams/destroy.<span class="hljs-name">js</span>:<span class="hljs-number">91</span>:<span class="hljs-number">8</span>)<br><span class="hljs-comment">-------Error Stack End------- </span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Simple53/cdn/1/img/20220315195522.png"></p><p>google该报错信息，并且浏览PicGo issue板块，作者对于类似问题给出的答复是Github网络连接存在问题，可以尝试设置代理，或者使用其他图床。</p><p><img src="https://cdn.jsdelivr.net/gh/Simple53/cdn//img/20220315200224.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Simple53/cdn//img/20220315200824.png"></p><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><ol><li>由于本人使用的代理为自动代理，不太明白如何获取上传地址，暂不设置http代理。</li><li>尝试使用全局代理，但没有成功。</li><li>一直使用的是cdn加速，但直接打开当前链接并不总是能够成功，说明网络还是有问题。借鉴之前github打不开并且图片裂的情况，我尝试更改HOSTS中的DNS设置，以此加快网络访问速度。</li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>打开github图床配置仓库的cdn链接，格式为<code>https://cdn.jsdelivr.net/gh/用户名/仓库名/</code></p></li><li><p>打开浏览器开发者模式（F12），选择网络版面（Network），刷新当前地址，查看红色的网址。下图仅为示意。本人发现访问不通的是<code>api.github.com</code>。<br><img src="https://cdn.jsdelivr.net/gh/Simple53/cdn//img/202203152028256.png"></p></li><li><p>用站长工具 <a href="http://tool.chinaz.com/dns?type=1&host=github.com&ip=">DNS 查询</a> 网址，选择距离本地区较近或者 [[TTL 值]]较大的IP。</p></li><li><p>映射文件存放于: <code>C:\Windows\System32\drivers\etc\hosts</code> 使用记事本打开 hosts 文件，添加如下格式代码：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">查询的<span class="hljs-built_in">IP</span> 网址<br></code></pre></td></tr></table></figure></li><li><p>修改HOSTS文件后，打开 cmd 输入<code>ipconfig/flushdns</code>刷新 dns 缓存。</p></li><li><p>最终上传成功。</p></li><li><p>将该DNS注释之后，再次上传失败。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实从报错文件中就可以看出可能是网络请求存在问题，例如请求超时造成的。cdn加速虽然可以加速，但根据地区差异仍有连接失败的情况，简单修改HOSTS即可解决picgo上传github失败的问题。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Github+jsDelivr+Coding+Obsidian免费高速稳定图床!</title>
    <link href="/2022/03/08/Github+jsDelivr+Coding+Obsidian%E5%85%8D%E8%B4%B9%E9%AB%98%E9%80%9F%E7%A8%B3%E5%AE%9A%E5%9B%BE%E5%BA%8A!/"/>
    <url>/2022/03/08/Github+jsDelivr+Coding+Obsidian%E5%85%8D%E8%B4%B9%E9%AB%98%E9%80%9F%E7%A8%B3%E5%AE%9A%E5%9B%BE%E5%BA%8A!/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>图床一直是影响博客撰写体验的重要工具，之前我一直用的是<code>sm.ms</code>图床，配合 Typora 的图片上传功能，可谓写作体验极佳。<code>sm.ms</code>图床虽然才成立没几年，但作为免费图床，自带 https，免账号上传，注册就有有后台管理，就已经吊打不少家了。总体而言，他的速度还算不错，但免不了有时候抽风，而且毕竟一小厂，现在又近乎用爱发电，万一哪天跑路了，博客里挂着的那些图岂不全没了。所以既想有稳定的体验，又想免费白嫖，可谓鱼和熊掌不可兼得啊。</p><p>不过最近我还真就发现了这近乎完美的解决方案。用 GitHub 作为存储，jsDelivr 作为 CDN 加速，如有必要，还可加上国内的 Coding 作为跳板，提升稳定性。</p><p>首先这几个都是大厂完全不必担心跑路。GitHub 就不必说了，jsDelivr 由 ProspectOne 维护的公共库，免费提供了 npm 和 GitHub 仓库的静态文件加速服务，可以说非常的良心，而且它在中国大陆也有数百个节点，可以说访问速度极佳，一张 3mb 的图片加载速度不到 1 秒钟！</p><p>之所以我还多用了个腾讯的 Coding，是因为国内的 GitHub 访问真的太不稳定了，上传失败的概率非常高。虽然 Coding 有放外链机制，速度也不是很快，但不妨让他做个跳板，帮我们自动把图片同步到 GitHub 仓库。</p><p>下面正式开始教程：</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>登录账号点击 <strong>New</strong> 新建一个仓库即可。可以选择放个 readme 作为初始化。注意一定要选择 <strong>Public</strong> 公开仓库，不然 jsDelivr 就无法访问你的仓库数据了。</p><h2 id="仓库配置"><a href="#仓库配置" class="headerlink" title="仓库配置"></a>仓库配置</h2><ol><li>创建仓库<br>注册 &#x2F; 登录自己的 GitHub，创建一个新的名字任意的<strong>公开</strong>仓库。然后上传图片到仓库中，这里我直接使用浏览器端上传的，也可以使用 Git 进行上传。</li><li>上传文件<br>新建的仓库需要上传文件，才能被后续的cdn识别。<br>在创建的仓库中点击<code>Upload files</code>。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9294fc315fbb4cb0a6ced40b00e39518~tplv-k3u1fbpfcp-watermark.awebp"></p><p>选择上传的图片，然后提交。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ab8c8be96714529890f2bf3b845d8e4~tplv-k3u1fbpfcp-watermark.awebp"></p><p> 提交之后，就可以在浏览器通过地址<code>https://raw.githubusercontent.com/你的用户名/你的仓库名/main/文件路径</code>来访问所上传的图片。</p><h3 id="生成-Token"><a href="#生成-Token" class="headerlink" title="生成 Token"></a>生成 Token</h3><ol><li>点击右上角头像选择<code>setting</code></li></ol><p><img src="https://pic3.zhimg.com/v2-4c334a8d0b925dd01b52776a91e9cb76_r.jpg"></p><ol start="2"><li>然后选择 <strong>Developer settings</strong></li></ol><p><img src="https://pic3.zhimg.com/v2-cfabe1ea2029242be1b8b36344d49d5a_r.jpg"></p><p>选择 <strong>Personal access tokens</strong>，点击 <strong>Generate new token</strong></p><p><img src="https://pic4.zhimg.com/v2-345502b0c070133969ad0e61186f618f_r.jpg"></p><p>输入名称，勾选第一个 <strong>repo</strong> 权限，点击下方 <strong>Generate token</strong> 按钮</p><p><img src="https://pic1.zhimg.com/v2-1e373977356be4f5d43de47acbf1a114_r.jpg"></p><p>之后会显示出生成的 token，<strong>⚠注意不要立刻关闭这个页面！</strong>这个 token <strong>只显示一次！</strong><br>不过就算忘记保存了也没事，再点击那条记录，点 <strong>Regenerate</strong> 即可。</p><p><img src="https://pic1.zhimg.com/v2-12b9705389d2f693f5f71d9f427982c8_r.jpg"></p><h2 id="PicGo-配置"><a href="#PicGo-配置" class="headerlink" title="PicGo 配置"></a>PicGo 配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://link.zhihu.com/?target=https://github.com/Molunerfinn/PicGo">点击前往下载</a>，根据 readme 里的安装教程即可。</p><p><img src="https://pic2.zhimg.com/v2-1a2a008b776ccf79d0ab2c63cba6fa45_r.jpg"></p><h3 id="配置-GitHub-图床"><a href="#配置-GitHub-图床" class="headerlink" title="配置 GitHub 图床"></a>配置 GitHub 图床</h3><p>填写如下配置：<br><img src="https://pic1.zhimg.com/v2-def8ae775862a6a58d7f9c45d9896a84_r.jpg"></p><p><strong>设定仓库名【必填】</strong> ：填写<code>你的用户名/你的仓库名</code>，<br><strong>设定分支名【必填】</strong>：填写<code>main</code><br><strong>设定 Token【必填】</strong> ：在 Github 主页点击自己头像后，依次选择【Settings】-&gt;【Developer settings】-&gt;【Personal access tokens】-&gt;【Generate new token】，填写 Note 描述（随便），设置过期时间 Expiration 为永不过期 No expiration，设定勾选【repo】，然后点击下方的【Generate token】生成一个 Token，这个 Token 只会显示一次，自行保存，然后复制到 PicGo 中。<br><strong>指定存储路径【选填】</strong>：填写图片要存储的路径，比如填【images&#x2F;】，这样就会在仓库下创建一个名为 images 的文件夹，图片将会储存在此文件夹中，这里不填。<br><strong>设定自定义域名【选填】</strong> ：图片上传后，PicGo 会按照【自定义域名 + 上传的图片名】的方式生成访问链接，放到剪贴板上，因为我们要使用 jsDeliver 进行加速，因而这里设置为<code>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名</code></p><h2 id="Obsidian中配合插件使用"><a href="#Obsidian中配合插件使用" class="headerlink" title="Obsidian中配合插件使用"></a>Obsidian中配合插件使用</h2><ol><li>打开 Obsidian 第三方插件，搜索 “image auto upload” 插件.</li><li>启动后，打开配置页面，打开自动上传开关。这样当你在 Obsidian 笔记中插入一个图片时，插件会自动把图片上传到远端的图床。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Simple53/Imagebed/img/202203081308630.png"></p><ol start="3"><li>插入图片时，会显示：”[uploading…]”，当上传完毕时，图片引用就会变成一个链接，就是图片的远端地址了。</li></ol><h2 id="Coding-图床-GitHub-自动同步"><a href="#Coding-图床-GitHub-自动同步" class="headerlink" title="Coding 图床 + GitHub 自动同步"></a>Coding 图床 + GitHub 自动同步</h2><p>Coding 是基于腾讯云的一个在线项目管理平台，相比 Gitee 功能更丰富，以及拥有类似 GItHub Action 的功能，可以配置自动工作流。同时因其支持 Pages 服务，我将它作为了博客的国内的分流站点，提升国内访问速度。详情可参考我的另一篇文章：<a href="#">Post not found: Hexo 折腾系列（一）博客访问速度优化</a></p><p>这里我将把它作为一个中间跳板，解决 <strong>GitHub 图床上传不稳定</strong>的问题。</p><h3 id="创建-Coding-仓库"><a href="#创建-Coding-仓库" class="headerlink" title="创建 Coding 仓库"></a>创建 Coding 仓库</h3><p>如果你已经有腾讯云账号，从这个 <a href="https://link.zhihu.com/?target=https://console.cloud.tencent.com/coding">链接</a> 进入；</p><p>如果你没有腾讯云账号，可以直接从 <a href="https://link.zhihu.com/?target=https://coding.net/">Coding 官网</a>注册。</p><blockquote><p><strong>⚠注意这两个账号不互通！</strong>  </p></blockquote><p>切换到项目一栏，点击右上角<strong>创建项目</strong>，一定是新建一个<strong>项目</strong>，不是原有项目里的一个仓库！</p><p><img src="https://pic2.zhimg.com/v2-daf1d74444fe587b0a750d0104b3b249_r.jpg"></p><p>选择 <strong>DevOps 项目</strong>，注意要勾选<strong>开源仓库</strong>，不然外链无法访问！</p><p><img src="https://pic3.zhimg.com/v2-70071cfc8df88df6b1849dc4e1f816c2_r.jpg"></p><p>接下来申请 token，步骤跟 GitHub 类似，<strong>同样这个 token 只显示一次，一定要记下来！！！</strong></p><p><img src="https://pic4.zhimg.com/v2-b53013f8413cc23f4c8aff319ed5d70f_r.jpg"></p><h3 id="PicGo-Coding-插件配置"><a href="#PicGo-Coding-插件配置" class="headerlink" title="PicGo-Coding 插件配置"></a>PicGo-Coding 插件配置</h3><p>PicGo 本体是不支持 Coding 的，但已经有大佬开发了插件，在插件中心搜索 coding 即可。 <a href="https://link.zhihu.com/?target=https://github.com/zytomorrow/picgo-plugin-coding">插件地址</a></p><p><img src="https://pic1.zhimg.com/v2-6a5ae51de9d2a6a1f5a39cf0e5b99ca0_r.jpg"></p><p>安装完成后重启一下 PicGo，在图床设置里就能找到 <strong>Coding 图床</strong>了。</p><p><img src="https://pic4.zhimg.com/v2-f482516f5ca377226ff9a9144bf676e7_r.jpg"></p><ul><li>团队名称: <a href="https://link.zhihu.com/?target=http://coding.net">http://coding.net</a> 团队名称</li><li>项目名称: 需要保存图片的库名</li><li>token: coding.net’s api token</li><li>分支: 需要存放图片的分支。默认 master</li><li>存储文件夹: 需要存放照片的指定文件夹</li><li>按年月日存放: 图片自动按日期路径存放与库中，可以存储文件夹混合使用</li></ul><p>以我的仓库为例：</p><p><img src="https://pic2.zhimg.com/v2-f1af8fc16d8ed318e274d9fc9f6d9069_r.jpg"></p><p>团队名称为<code>luzy999</code>，项目名称为<code>cdn</code>，分支为<code>master</code>，指定的文件夹为<code>img</code></p><p>到此为止 Coding 图床已经搭建完毕了，可以上传图片试试。</p><p>但这还不是我的最终目的，Coding 的国内访问速度还算可以，但相比强大的 jsDelivr，差距还算不小的，但 jsDelivr 只提供 GitHub 仓库的加速。那有没有办法让他也加速 Coding 呢？</p><p>对此我想出了一个迂回方法，Coding 不是有<strong>构建计划</strong>功能吗，那我每次提交图片到 Coding，让他再<strong>自动同步到 GitHub</strong> 不就成了！</p><h3 id="配置-Coding-自动同步功能"><a href="#配置-Coding-自动同步功能" class="headerlink" title="配置 Coding 自动同步功能"></a>配置 Coding 自动同步功能</h3><p>在<strong>持续集成</strong>菜单下有个<strong>构建计划</strong>功能，点击创建。</p><p><img src="https://pic2.zhimg.com/v2-0e707ec5c7df9d76d5dd9aa7a6e6e251_r.jpg"></p><p>选择<strong>自定义构建过程</strong></p><p><img src="https://pic4.zhimg.com/v2-d4007fe61571bf0fe31e4dc191272b17_r.jpg"></p><p>切换到文本编辑器：</p><p><img src="https://pic2.zhimg.com/v2-61461dd445fb52e19981a173311a2d7d_r.jpg"></p><p>输入以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><pre><code class="hljs python">pipeline &#123;<br>  agent <span class="hljs-built_in">any</span><br>  stages &#123;<br>    stage(<span class="hljs-string">&#x27;检出&#x27;</span>) &#123;<br>      steps &#123;<br>        checkout([<br>          $<span class="hljs-keyword">class</span>: <span class="hljs-string">&#x27;GitSCM&#x27;</span>,<br>          branches: [[name: env.GIT_BUILD_REF]],<br>          userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]<br>        ])<br>      &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;拉取合并&#x27;</span>) &#123;<br>      steps &#123;<br>        sh <span class="hljs-string">&#x27;&#x27;&#x27;url=&quot;https://$&#123;username&#125;:$&#123;token&#125;@github.com/$&#123;username&#125;/$&#123;repo&#125;.git&quot;</span><br><span class="hljs-string">git pull $url&#x27;&#x27;&#x27;</span><br>        echo <span class="hljs-string">&#x27;合并成功！&#x27;</span><br>      &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;推送部署&#x27;</span>) &#123;<br>      steps &#123;<br>        echo <span class="hljs-string">&#x27;正在推送文件...&#x27;</span><br>        sh <span class="hljs-string">&#x27;&#x27;&#x27;url=&quot;https://$&#123;username&#125;:$&#123;token&#125;@github.com/$&#123;username&#125;/$&#123;repo&#125;.git&quot;</span><br><span class="hljs-string">git push -f $url HEAD:master&#x27;&#x27;&#x27;</span><br>        echo <span class="hljs-string">&#x27;已完成推送.&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加环境变量</p><p><img src="https://pic4.zhimg.com/v2-525d9e4a6775cc1f8f2c81cecc82b343_r.jpg"></p><ul><li><p>username 为 GitHub 用户名</p></li><li><p>token 为 GitHub 的 token，注意是 <strong>GitHub</strong> 的，如果忘了，再去申请一个就行。 <a href="https://zhuanlan.zhihu.com/p/245196007/edit#%E7%94%9F%E6%88%90Token">回上面看看</a>  </p></li><li><p>repo 为 GitHub 上的仓库名</p></li></ul><p>点击<strong>触发规则</strong>，设置推送到<code>master</code>时自动触发：</p><p><img src="https://pic2.zhimg.com/v2-0950537403688c3cc3e89f99097445e5_r.jpg"></p><p>可以点击<strong>立即构建</strong>测试一下是否成功。</p><p>看看效果：</p><p><img src="https://pic1.zhimg.com/v2-29f32a06de9cbd6fa77009f7c1e7483c_r.jpg"></p><p>同样一张 3.1mb 的图片，Coding 加载花了 1.3s，而 jsDelivr 只花了 363ms！加速效果还是很明显的！</p><p>最后再来提几点注意事项：</p><ul><li>Coding 免费版每周可以免费构建 200 次，也就是说可以推送 200 张图片，也基本够用了。</li></ul><p><img src="https://pic4.zhimg.com/v2-2a4918993b9dcd09cd8a08a68a82514f_r.jpg"></p><ul><li>~~ 由于 picgo-coding 插件暂时不支持自定义域名~~，所以返回的图片 url 还是 Coding 仓库的地址，如果要替换成 jsDelivr 的地址，只能写完后再全局搜索替换一下了，也不是很麻烦。</li><li>【更新】作者非常给力，提交了 issue，立刻就上线了自定义域名这个功能，不过由于同步需要时间，就不能实时显示图片了，可以说有利有弊吧。</li></ul><h2 id="配置-Github-Action-自动压缩图片"><a href="#配置-Github-Action-自动压缩图片" class="headerlink" title="配置 Github Action 自动压缩图片"></a>配置 Github Action 自动压缩图片</h2><p>✨这几天碰巧看到一篇文章，<a href="https://link.zhihu.com/?target=https://juejin.im/post/6844904003353083918">我的 gitee 图床，自动上传、压缩、获取图片 url</a>，可以利用 GitHub Action 实现自动压缩图片。</p><h3 id="安装-ImgBot"><a href="#安装-ImgBot" class="headerlink" title="安装 ImgBot"></a>安装 ImgBot</h3><p>为 github 仓库安装 <a href="https://link.zhihu.com/?target=https://imgbot.net/">ImgBot 机器人</a>。 打开 ImgBot 网站，点击 【try for free】， ImgBot 声称开源项目能够一直免费使用其服务。 从 ImgBot 网站跳转到 github 网站后，点击 【Set up a plan】 按钮，在下一步中选择 【Open Source】 这一个免费计划。下一步是【Install it for free】。 最后到这下图这个步骤，选择为刚刚创建的图床仓库打开 ImgBot。</p><p><img src="https://pic2.zhimg.com/v2-2ccc5472a111244e25fec0f575debe9d_r.jpg"></p><p>这个 Bot 会自动检索仓库中的图片文件，进行压缩后提交 Pull Request，但需要手动点击合并，就很麻烦。但别担心，强大的 GitHub Action 同样可以自动化处理合并请求。</p><h3 id="配置自动合并-Workflow"><a href="#配置自动合并-Workflow" class="headerlink" title="配置自动合并 Workflow"></a>配置自动合并 Workflow</h3><p>点击 GitHub 仓库中的【Actions】，选择【New Workflow】，输入如下代码：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">name:</span> Merge Imgbot<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">on:</span><br><span class="hljs-symbol">  pull_request:</span><br><span class="hljs-symbol">    types:</span><br>      - opened<br>      - ready_for_review<br><span class="hljs-symbol">  pull_request_review:</span><br><span class="hljs-symbol">    types:</span><br>      - submitted<br><span class="hljs-symbol">  status:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">jobs:</span><br><span class="hljs-symbol">  automerge:</span><br>    runs-on: ubuntu-latest<br><span class="hljs-symbol">    steps:</span><br>      - name: automerge<br><span class="hljs-symbol">        uses:</span> <span class="hljs-string">&quot;pascalgn/automerge-action@v0.9.0&quot;</span><br><span class="hljs-symbol">        env:</span><br><span class="hljs-symbol">          GITHUB_TOKEN:</span> <span class="hljs-string">&quot;$&#123;&#123; secrets.GIT_TOKEN &#125;&#125;&quot;</span><br><span class="hljs-symbol">          MERGE_LABELS:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-symbol">          MERGE_METHOD:</span> <span class="hljs-string">&quot;squash&quot;</span><br><span class="hljs-symbol">          MERGE_COMMIT_MESSAGE:</span> <span class="hljs-string">&quot;pull-request-description&quot;</span><br><span class="hljs-symbol">          MERGE_FORKS:</span> <span class="hljs-string">&quot;false&quot;</span><br><span class="hljs-symbol">          MERGE_RETRIES:</span> <span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-symbol">          MERGE_RETRY_SLEEP:</span> <span class="hljs-string">&quot;10000&quot;</span><br><span class="hljs-symbol">          UPDATE_METHOD:</span> <span class="hljs-string">&quot;rebase&quot;</span><br></code></pre></td></tr></table></figure><p>这其实是使用了一个 auto-merge 插件，详细配置见<a href="https://link.zhihu.com/?target=https://github.com/pascalgn/automerge-action">官方文档</a>。一般也不用修改。</p><p>最后别忘了在仓库的 setting 中加入 GitHub Token</p><p><img src="https://pic2.zhimg.com/v2-cc5f6a8a459267c8e7dd0f967f7077e5_r.jpg"></p><p>看看压缩效果：</p><p><img src="https://pic2.zhimg.com/v2-f38ffdabb2d365d813e68a28fce6d275_r.jpg"></p><p><strong>原文地址：</strong></p><p><a href="https://link.zhihu.com/?target=https://blog.luzy.top/posts/214001566/">Github+jsDelivr+Coding 免费高速稳定图床 get!</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Github打造个人主页</title>
    <link href="/2022/02/18/Hexo-Github%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5/"/>
    <url>/2022/02/18/Hexo-Github%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo框架"><a href="#Hexo框架" class="headerlink" title="Hexo框架"></a>Hexo框架</h1><p> 官网：<a href="https://hexo.io/zhcn/index.html">Hexo</a><br> 教程：<a href="https://zhuanlan.zhihu.com/p/85037427">知乎</a><br> <a href="https://hexo.io/zhcn/index.html">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。即把用户的markdown文件，按照指定的主题解析成静态网页。</p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><h3 id="1-1依赖安装"><a href="#1-1依赖安装" class="headerlink" title="1.1依赖安装"></a>1.1依赖安装</h3><p> Hexo平台依赖node.js以及Git,所以需要在主机上下载安装。<br>     <a href="http://nodejs.cn/download/">node.js地址</a>          <a href="https://blog.csdn.net/chanyeolchichi/article/details/121348541">安装指南</a><br>     <a href="https://gitscm.com/">git地址</a>                  <a href="https://blog.csdn.net/mukes/article/details/115693833">安装指南</a></p><h3 id="1-2Hexo安装"><a href="#1-2Hexo安装" class="headerlink" title="1.2Hexo安装"></a>1.2Hexo安装</h3> <figure class="highlight pgsql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs pgsql">$ npm install hexocli g<br>added <span class="hljs-number">59</span> packages, <span class="hljs-keyword">and</span> audited <span class="hljs-number">60</span> packages <span class="hljs-keyword">in</span> <span class="hljs-number">13</span>s<br><br><span class="hljs-number">14</span> packages are looking <span class="hljs-keyword">for</span> funding<br>  run `npm fund` <span class="hljs-keyword">for</span> details<br><br><span class="hljs-built_in">found</span> <span class="hljs-number">0</span> vulnerabilities<br>npm <span class="hljs-keyword">notice</span><br>npm <span class="hljs-keyword">notice</span> <span class="hljs-built_in">New</span> minor <span class="hljs-keyword">version</span> <span class="hljs-keyword">of</span> npm available! <span class="hljs-number">8.3</span><span class="hljs-number">.1</span> &gt; <span class="hljs-number">8.5</span><span class="hljs-number">.0</span><br>npm <span class="hljs-keyword">notice</span> Changelog: &lt;https://github.com/npm/cli/releases/tag/v8<span class="hljs-number">.5</span><span class="hljs-number">.0</span>&gt;<br>npm <span class="hljs-keyword">notice</span> Run `npm install g npm@<span class="hljs-number">8.5</span><span class="hljs-number">.0</span>` <span class="hljs-keyword">to</span> <span class="hljs-keyword">update</span>!<br>npm <span class="hljs-keyword">notice</span><br></code></pre></td></tr></table></figure><h3 id="1-3建站"><a href="#1-3建站" class="headerlink" title="1.3建站"></a>1.3建站</h3><p> 安装完Hexo之后，执行下列命令，Hexo将会在指定目录中新建所需要的文件，指定的目录即为Hexo的工作站<br>  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ hexo init &lt;folder&gt;<br><span class="hljs-keyword">INFO</span>  Cloning hexostarter https://github.com/hexojs/hexostarter.git<br><span class="hljs-keyword">INFO</span>  Install dependencies<br><span class="hljs-keyword">INFO</span>  <span class="hljs-keyword">Start</span> blogging <span class="hljs-keyword">with</span> Hexo!<br></code></pre></td></tr></table></figure><br>  新建完成之后，指定目录中的情况如下<br>  <figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sqf">├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br></code></pre></td></tr></table></figure></p><h3 id="1-4预览"><a href="#1-4预览" class="headerlink" title="1.4预览"></a>1.4预览</h3> <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">$Hexo serve <span class="hljs-comment">#发布</span><br>INFO  Validating config<br>INFO  Start processing<br>INFO  Hexo is running <span class="hljs-keyword">at</span> <span class="hljs-keyword">http</span>://localhost:<span class="hljs-number">4000</span>/ . Press Ctrl+C <span class="hljs-built_in">to</span> <span class="hljs-built_in">stop</span>.<br><span class="hljs-comment">#注意是http不是https</span><br></code></pre></td></tr></table></figure><p> 打开后可以看到默认界面<br> <img src="/2022/02/18/Hexo-Github%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5/example.png" alt="默认landscape主题"></p><h2 id="2-创作"><a href="#2-创作" class="headerlink" title="2.创作"></a>2.创作</h2><h3 id="2-1新建页面"><a href="#2-1新建页面" class="headerlink" title="2.1新建页面"></a>2.1新建页面</h3><p> 新页面以markdown格式生成在source&#x2F;_post文件夹下<br> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ hexo new <span class="hljs-string">&#x27;My first blog&#x27;</span>  # <span class="hljs-keyword">or</span> hexo n <br><span class="hljs-built_in">INFO</span>  Validating<span class="hljs-built_in"> config</span><br><span class="hljs-built_in"></span><span class="hljs-built_in">INFO</span>  Created: F:\OneDrive  zju.edu.cn\Blog\source\_posts\Myfirstblog.md<br></code></pre></td></tr></table></figure></p><h3 id="2-2清理，生成，发布网页"><a href="#2-2清理，生成，发布网页" class="headerlink" title="2.2清理，生成，发布网页"></a>2.2清理，生成，发布网页</h3> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ hexo clean<br><span class="hljs-built_in">INFO</span>  Validating<span class="hljs-built_in"> config</span><br><span class="hljs-built_in"></span><span class="hljs-built_in">INFO</span>  Deleted database.<br><br>$ hexo generate # <span class="hljs-keyword">or</span> hexo g<br><span class="hljs-built_in">INFO</span>  Validating<span class="hljs-built_in"> config</span><br><span class="hljs-built_in"></span><span class="hljs-built_in">INFO</span>  Start processing<br><span class="hljs-built_in">INFO</span>  Files loaded <span class="hljs-keyword">in</span> 101 ms<br><br>$ hexo serve # <span class="hljs-keyword">or</span> hexo s<br></code></pre></td></tr></table></figure><h2 id="3-Github部署"><a href="#3-Github部署" class="headerlink" title="3.Github部署"></a>3.Github部署</h2><p> 本地构建了网页内容之后可以借助github的免费网站进行发布，同时可以将网页内容放置在github存储库以进行版本空置。</p><h3 id="3-1创建github-io仓库"><a href="#3-1创建github-io仓库" class="headerlink" title="3.1创建github.io仓库"></a>3.1创建github.io仓库</h3><p> 注册github账户<br> 右侧加号New repository<br> 名称必须于Owner相同<br> <img src="/2022/02/18/Hexo-Github%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5/github.png" alt="创建github主页"></p><h3 id="3-2本地安装插件"><a href="#3-2本地安装插件" class="headerlink" title="3.2本地安装插件"></a>3.2本地安装插件</h3><p> 安装cnpm，更改为淘宝镜像源<br> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install g cnpm registry=https:<span class="hljs-regexp">//</span>registry.npm.taobao.org <br></code></pre></td></tr></table></figure><br> 打开Hexo博客根目录，安装hexodeployergit插件<br> <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cnpm <span class="hljs-keyword">install</span> save hexodeployergit<br></code></pre></td></tr></table></figure><br> 更改_config.yml配置文件<br> repo为仓库地址，打开github.io，复制地址<br> <img src="/2022/02/18/Hexo-Github%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5/link.png" alt="复制仓库链接"><br> <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/onecommanddeployment</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/Simple53/Simple53.github.io.git</span><br><span class="hljs-symbol">  brach:</span> master<br></code></pre></td></tr></table></figure></p><p> 部署<br> <figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo d<br></code></pre></td></tr></table></figure><br> 报错<br> <figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">FATAL &#123;<br>  <span class="hljs-attribute">err</span>: Error: Spawn failed<br>      at ChildProcess.&lt;anonymous&gt; (F:\OneDrive  zju<span class="hljs-variable">.edu</span><span class="hljs-variable">.cn</span>\Blog\node_modules\_hexoutil@2.6.0@hexoutil\lib\spawn<span class="hljs-variable">.js</span>:51:21)<br>      at ChildProcess<span class="hljs-variable">.emit</span> (node:events:520:28)<br>      at ChildProcess<span class="hljs-variable">.cp</span><span class="hljs-variable">.emit</span> (F:\OneDrive  zju<span class="hljs-variable">.edu</span><span class="hljs-variable">.cn</span>\Blog\node_modules\_crossspawn@7.0.3@crossspawn\lib\enoent<span class="hljs-variable">.js</span>:34:29)<br>      at Process<span class="hljs-variable">.ChildProcess</span><span class="hljs-variable">._handle</span><span class="hljs-variable">.onexit</span> (node:internal/child_process:291:12) &#123;<br>    code: 1<br>  &#125;<br>&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo<span class="hljs-variable">.io</span>/docs/troubleshooting<span class="hljs-variable">.html</span><br></code></pre></td></tr></table></figure></p><p> 原因是目前更改为了main分支<br> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">INFO</span>  Deploy done: git<br></code></pre></td></tr></table></figure><br> 成功部署</p><h2 id="4-Hexo主题更换"><a href="#4-Hexo主题更换" class="headerlink" title="4.Hexo主题更换"></a>4.Hexo主题更换</h2><h3 id="1-寻找主题"><a href="#1-寻找主题" class="headerlink" title="1.寻找主题"></a>1.寻找主题</h3><p> hexo社区提供了很多配套主题，可以直接在Github上搜索hexo theme，接下来我们以hexothemefluid为例进行演示。</p><h3 id="2-下载主题"><a href="#2-下载主题" class="headerlink" title="2.下载主题"></a>2.下载主题</h3><p> 方法一：gitclone<br> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fluiddev/</span>hexothemefluid.git themes/fluid<br></code></pre></td></tr></table></figure><br> 方法二：<br> 手动下载之后放置在Hexo文件夹下的themes目录中</p><h3 id="3-更改配置"><a href="#3-更改配置" class="headerlink" title="3.更改配置"></a>3.更改配置</h3><p> 更改_config.yml文件<br> <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">theme : <span class="hljs-type">fluid</span><br></code></pre></td></tr></table></figure></p><h3 id="4-清除、生成、发布"><a href="#4-清除、生成、发布" class="headerlink" title="4.清除、生成、发布"></a>4.清除、生成、发布</h3> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo clean <span class="hljs-regexp">//</span>清除一下缓存<br>hexo g  <span class="hljs-regexp">//</span>生成静态页面<br>hexo s <span class="hljs-regexp">//</span>开启本地服务器<br></code></pre></td></tr></table></figure><p> Fluid标志<br> <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><br>|<span class="hljs-string">                                              </span>|<br>|<span class="hljs-string">     ________  __            _        __      </span>|<br>|<span class="hljs-string">    </span>|<span class="hljs-string">_   __  </span>|<span class="hljs-string">[  </span>|<span class="hljs-string">          (_)      </span>|<span class="hljs-string">  ]     </span>|<br>|<span class="hljs-string">      </span>|<span class="hljs-string"> </span>|<span class="hljs-string">_ \_</span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> __   _   __   ..</span>|<span class="hljs-string"> </span>|<span class="hljs-string">      </span>|<br>|<span class="hljs-string">      </span>|<span class="hljs-string">  _</span>|<span class="hljs-string">    </span>|<span class="hljs-string"> </span>|<span class="hljs-string">[  </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> [  </span>|<span class="hljs-string">/ /&#x27;`\&#x27; </span>|<span class="hljs-string">      </span>|<br>|<span class="hljs-string">     _</span>|<span class="hljs-string"> </span>|<span class="hljs-string">_     </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string"> \_/ </span>|<span class="hljs-string">, </span>|<span class="hljs-string"> </span>||<span class="hljs-string"> \__/  </span>|<span class="hljs-string">      </span>|<br>|<span class="hljs-string">    </span>|<span class="hljs-string">_____</span>|<span class="hljs-string">   [___]&#x27;.__.&#x27;_/[___]&#x27;.__.;__]     </span>|<br>|<span class="hljs-string">                                              </span>|<br>|<span class="hljs-string">       Thank you for using Fluid theme !      </span>|<br>|<span class="hljs-string">   Docs: https://hexo.fluiddev.com/docs/en/  </span>|<br>|<span class="hljs-string">                                              </span>|<br><br></code></pre></td></tr></table></figure></p><h2 id="5-主题推荐"><a href="#5-主题推荐" class="headerlink" title="5.主题推荐"></a>5.主题推荐</h2><p> 整理 <a href="https://github.com/hexojs/hexo/wiki/Themes">https://github.com/hexojs/hexo/wiki/Themes</a><br>     <strong><a href="https://github.com/ShenYu/hexothemeayer">Ayer</a></strong>  A Clean and Beautiful Theme for Hexo, also Responsive.  <a href="https://shenyu.gitee.io/"><strong><em>Demo</em></strong></a><br>     <strong><a href="https://github.com/moretwo/hexotheme">Mabao</a></strong>  Less is more,Designer theme on <a href="https://github.com/moretwo/hexotheme">the mabaotheme</a>  <a href="http://moretwo.github.io/"><strong><em>Demo</em></strong></a><br>     <strong><a href="https://github.com/heroicyang/hexothememodernist">Modernist</a></strong>  A theme with <a href="http://duoshuo.com/">duoshuo</a> comments. Based on the <a href="https://github.com/orderedlist/modernist">GitHub Pages Modernist theme</a>  <a href="http://heroicyang.com/"><strong><em>Demo</em></strong></a><br>     <strong><a href="https://github.com/sun11/hexothemepaperbox">Paperbox</a></strong>  A responsive paperlike theme, based on <a href="https://github.com/xiangming/landscapeplus">Landscape plus</a>  <a href="http://sun11.me/"><strong><em>Demo</em></strong></a><br>     <strong><a href="https://github.com/heruoxin/hexopersonacolor">Persona Color</a></strong>  A responsive theme with 4 color schemes. Based on <a href="https://github.com/thiagopnts/hexopersonadark">Persona Dark</a>.  <a href="https://www.1ittlecup.com/"><strong><em>Demo</em></strong></a><br>     <strong><a href="https://github.com/SuperKieran/TKL">TKL</a></strong>  A responsive design theme for Hexo. 一个设计优雅的响应式主题  <a href="http://go.kieran.top/"><strong><em>Demo</em></strong></a><br>     <strong><a href="https://github.com/Youthink/hexothemesyearn">Yearn</a></strong>  Simple style responsive 简洁优雅的响应式主题  <a href="https://hufangyun.com/"><strong><em>Demo</em></strong></a><br>     <strong><a href="https://github.com/JoeyBling/hexothemeyiliaplus">Yiliaplus</a></strong>  A simple and elegant theme for hexo 优雅简洁响应式主题  <a href="https://joeybling.github.io/"><strong><em>Demo</em></strong></a></p><p> 个人推荐<br> <a href="https://github.com/jerryc127/hexothemebutterfly">butterfly</a><br> <a href="https://github.com/LouisBarranqueiro/hexothemetranquilpeak">tranquilpeak</a><br> <a href="https://github.com/fluiddev/hexothemefluid">fluid</a></p><p> 经典主题<br> <a href="https://github.com/themenext/hexothemenext">themenext&#x2F;hexothemenext: Elegant and powerful theme for Hexo. (github.com)</a><br> <a href="https://github.com/fluiddev/hexothemefluid">fluiddev&#x2F;hexothemefluid: 一款 Material Design 风格的 Hexo 主题 &#x2F; An elegant MaterialDesign theme for Hexo (github.com)</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p> <a href="https://www.bilibili.com/video/av44544186">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>Hexo</tag>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My first blog</title>
    <link href="/2022/02/17/My-first-blog/"/>
    <url>/2022/02/17/My-first-blog/</url>
    
    <content type="html"><![CDATA[<h2 id="Chapter1"><a href="#Chapter1" class="headerlink" title="Chapter1"></a>Chapter1</h2><hr><h2 id="Chapter2"><a href="#Chapter2" class="headerlink" title="Chapter2"></a>Chapter2</h2><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>Simple53.github.io</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/02/17/hello-world/"/>
    <url>/2022/02/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
